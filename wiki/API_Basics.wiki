#summary Package information, getting started and drawing basic shapes

= Introduction =

This library is not designed to provide full access to every corner of
SVG functionality.  For that you are better off using a complete XML
library.  My purpose with this library is to make it easy to create
SVG files that don't need to do anything too exotic.  All the shapes
and grouping elements are provided.

The library aims to produce readable XML.  This inflates the size of
the resulting somewhat, especially if it contains deeply nested
elements.  The formatting depends on your Lisp correctly implementing
the *`~<`* directive.

For more info on SVG see the [http://www.w3.org/TR/SVG11/ 1.1]
Specification.  W3 Schools also has a good
[http://www.w3schools.com/svg/default.asp tutorial].

== Attribute Handling ==

The library also does some extra sanity-checking on attributes.  When
an SVG shape element is missing certain attributes SVG viewers will
simply ignore the element.  Most of the time I want to know if I've
missed a necessary attribute.  There are, however, situations where
missing attributes can be inherited from an enclosing SVG element.
The macro *`WITHOUT-ATTRIBUTE-CHECK`* allows you to tell the library
to not check for missing attributes when necessary.

The authors of the SVG spec were evidently unable to decide between
naming attributes with lisp-style `dashed-names` or using `camelCase`.
This library will happily accept attribute names like `:marker-units`
and will convert that to `markerUnits` in the SVG output.  Because the
SVG standard is a mish-mash in this regard the name conversion is
table-driven.  If I've missed any attributes you can also use strings
instead of keywords as attribute names.

Finally, within SVG itself it is common to refer to other elements.
This is usually handled by referring to the element's `id` property.
Searching for what you want using some other property requires
Javascript.  Using *`:id :generate`* in element creation will result
in a random string for the `id` property, which you may extract with
the generic function `xlink-href`.  See the gradient or symbol
examples for expected use patterns.


== The Package ==

The package name is *`:cl-svg`* with a single nickname, *`:svg`*.

It depends on no other libraries.

== Conditions and Restarts ==

_condition_
*`missing-attributes`*
  Is signaled when the required attributes of an element are missing.
  If you're sure you don't need the missing attributes, you can skip
  the check with the macro *`WITHOUT-ATTRIBUTE-CHECK`*

There are no restarts.

== Global Variables ==

_special variable_
*`*float-format-precision*`*
  Controls how many digits after the decimal place to print in SVG
  element attributes.  It defaults to 2.  Highly precise floating
  point numbers for coordinates, etc., serve little purpose but to
  inflate the size of the SVG file.

_special variable_
*`*indent-spacing*`*
  Controls how many spaces to indend at each level of XML nesting.  It
  defaults to 2.  Set it to zero for no indentation.



== SVG Toplevel ==

The *`svg-toplevel`* class (never accessed directly) handles XML
boilerplate as well as providing the outermost XML container for all
the graphical and support elements.


_function_
*`make-svg-toplevel`*  _`class &rest attributes` => svg-toplevel object_
 Creates the highest-level SVG container.  The first argument is a quoted
 class representing an SVG version.  At the moment the only option 
 is *`svg-1.1-toplevel`* (as of May 2008 version 1.2 is still in the
 works).  The attributes are keyword/value pairs, of which you need at
 the very least to specify *`:height`* and *`:width`*.

 The `xmlns` and `xmlns:xlink` namespace attributes are included by
 default.  The property `id` is set to `toplevel` unless you specify
 something else.

{{{
(let ((scene (make-svg-toplevel 'svg-1.1-toplevel :height 300 :width 300)))
  (draw scene (:rect :x 5 :y 5 :height 30 :width 30))
...
}}}

_generic function_
*`add-stylesheet`*  _`svg-toplevel stylesheet-url`_
 Adds an XML stylesheet URL to the SVG file.  CSS may also be added
 inline with the function *`style`*.



== Drawing Shape Elements ==

The syntax of the shape drawing macro is meant to highlight those
properties which must be defined for the shape to be rendered at all.
This is entirely an artificat of this library, since from the XML side
there is no special syntax that distinguishes these properties.

_macro_
*`draw`* _`canvas (:SHAPE { required properties }) {other properties}` => svg-element object_
 Adds a new shape to a canvas.  The shape keywords match the SVG
 element names exactly:

 || *Shape* || *Required attributes* ||
 || `:line`    ||  `:x1 :y1 :x2 :y2`  ||
 || `:rect`    ||  `:x :y :height :width` ||
 || `:polyline` || `:points`   ||
 || `:polygon`  || `:points`   ||
 || `:ellipse`  || `:cx :cy :rx :ry` ||
 || `:circle`   || `:cx :cy :r`  ||
 || `:path`     || `:d`    ||
 || `:use`      || `:xlink-href`  ||
 || `:image`    || `:x :y :height :width :xlink-href` ||


